{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 106, "column": 0}, "map": {"version":3,"sources":["file:///Users/majd/vaste/probable-broccoli/convex/_generated/api.js"],"sourcesContent":["/* eslint-disable */\n/**\n * Generated `api` utility.\n *\n * THIS CODE IS AUTOMATICALLY GENERATED.\n *\n * To regenerate, run `npx convex dev`.\n * @module\n */\n\nimport { anyApi } from \"convex/server\";\n\n/**\n * A utility for referencing Convex functions in your app's API.\n *\n * Usage:\n * ```js\n * const myFunctionReference = api.myModule.myFunction;\n * ```\n */\nexport const api = anyApi;\nexport const internal = anyApi;\n"],"names":[],"mappings":"AAAA,kBAAkB,GAClB;;;;;;;CAOC;;;;AAED;AAAA;;AAUO,MAAM,MAAM,wJAAA,CAAA,SAAM;AAClB,MAAM,WAAW,wJAAA,CAAA,SAAM","debugId":null}},
    {"offset": {"line": 278, "column": 0}, "map": {"version":3,"sources":["file:///Users/majd/vaste/probable-broccoli/app/api/discord/host-bot/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { currentUser } from '@clerk/nextjs/server';\nimport { ConvexHttpClient } from 'convex/browser';\nimport { api } from '@/convex/_generated/api';\nimport { REST } from '@discordjs/rest';\nimport { Routes } from 'discord-api-types/v10';\n\nexport const runtime = 'nodejs';\n\nconst convex = new ConvexHttpClient(process.env.NEXT_PUBLIC_CONVEX_URL!);\n\ntype DiscordConfigRecord = {\n  _id: string;\n  userId: string;\n  agentId: string;\n  botToken: string;\n  clientId: string;\n  guildId?: string | null;\n  isActive: boolean;\n  botStatus?: string;\n  lastSeen?: number;\n  createdAt: number;\n  updatedAt: number;\n};\n\nexport async function POST(request: NextRequest) {\n  try {\n    const user = await currentUser();\n    const userId = user?.id;\n    if (!userId) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    const body = await request.json();\n    const { agentId, configId } = body;\n\n    if (!agentId || !configId) {\n      return NextResponse.json(\n        { error: 'Missing required fields: agentId, configId' },\n        { status: 400 }\n      );\n    }\n\n    // Get the Discord configuration\n    const config = await convex.query(api.discord.getDiscordConfig, {\n      userId,\n      agentId,\n    });\n\n    if (!config) {\n      return NextResponse.json(\n        { error: 'Discord configuration not found' },\n        { status: 404 }\n      );\n    }\n\n    // Update bot status to \"starting\"\n    await convex.mutation(api.discord.updateBotStatus, {\n      configId: config._id,\n      status: 'starting',\n      lastSeen: Date.now(),\n    });\n\n    // 1) Register slash commands automatically so the bot is usable immediately\n    await registerDiscordCommands({\n      token: config.botToken,\n      clientId: config.clientId,\n      guildId: config.guildId ?? undefined,\n    });\n\n    // 2) Trigger/start your Discord bot service\n    // In production, you should have a dedicated worker (e.g., Railway/Render) running\n    // `integrations/discord/bot-runner.js` which polls Convex and keeps bots online.\n    // Here we simulate/confirm startup path.\n    await startDiscordBot(config as DiscordConfigRecord);\n\n    // Update bot status to \"running\"\n    await convex.mutation(api.discord.updateBotStatus, {\n      configId: config._id,\n      status: 'running',\n      lastSeen: Date.now(),\n    });\n\n    // Generate invite URL\n    const inviteUrl = `https://discord.com/api/oauth2/authorize?client_id=${config.clientId}&permissions=2048&scope=bot`;\n\n    return NextResponse.json({\n      success: true,\n      message: 'Discord bot is now hosted and running!',\n      inviteUrl,\n      botStatus: 'running'\n    });\n\n  } catch (error) {\n    console.error('Discord bot hosting error:', error);\n    return NextResponse.json(\n      { error: 'Failed to start hosting Discord bot' },\n      { status: 500 }\n    );\n  }\n}\n\n// Function to start the Discord bot (you'll implement this based on your hosting setup)\nasync function startDiscordBot(config: DiscordConfigRecord) {\n  // This is where you would:\n  // 1. Create a new Discord bot instance\n  // 2. Connect it to Discord using the bot token\n  // 3. Set up message handlers for your agent\n  // 4. Store the bot instance in your bot manager\n  \n  console.log(`Starting Discord bot for agent ${config.agentId} with client ID ${config.clientId}`);\n  \n  // Simulate bot startup delay\n  await new Promise(resolve => setTimeout(resolve, 2000));\n  \n  // In a real implementation, you would:\n  // - Use a bot manager service to track running bots\n  // - Start the actual Discord.js client\n  // - Handle message routing to the correct agent\n  \n  return true;\n}\n\n// Register the same commands as scripts/register-commands.js using discord.js REST\nasync function registerDiscordCommands({ token, clientId, guildId }: { token: string; clientId: string; guildId?: string }) {\n  const commands = [\n    {\n      name: 'vaste',\n      description: 'Interact with the Vaste AI bot',\n      type: 1, // CHAT_INPUT\n      options: [\n        {\n          type: 1, // SUB_COMMAND\n          name: 'chat',\n          description: 'Send a message to your configured AI agent',\n          options: [\n            {\n              type: 3, // STRING\n              name: 'message',\n              description: 'Your message',\n              required: true,\n            },\n          ],\n        },\n        {\n          type: 1, // SUB_COMMAND\n          name: 'config',\n          description: 'Configure the agent for this server',\n          options: [\n            {\n              type: 3, // STRING\n              name: 'agent_id',\n              description: 'Your agent ID from the Vaste dashboard',\n              required: true,\n            },\n          ],\n        },\n        {\n          type: 1, // SUB_COMMAND\n          name: 'status',\n          description: 'Check current configuration and status',\n        },\n      ],\n    },\n  ];\n\n  const rest = new REST({ version: '10' }).setToken(token);\n  if (guildId) {\n    await rest.put(\n      Routes.applicationGuildCommands(clientId, guildId),\n      { body: commands }\n    );\n    console.log(`[discord] Registered GUILD commands for guild ${guildId}.`);\n  } else {\n    await rest.put(\n      Routes.applicationCommands(clientId),\n      { body: commands }\n    );\n    console.log('[discord] Registered GLOBAL commands.');\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}